----------------------------------------
-------------- MODULO 4 ----------------
----------------------------------------

-- NULL -> TOTALMENTE AUSENTE DE INFORMÇÃO 
-- NULL <> '' (vazio)

select CIDADE, ESTADO, MUNICIPIO, COMPLEMENTO
from enderecos
where MUNICIPIO <> 1832

select CIDADE, ESTADO, MUNICIPIO, COMPLEMENTO
from enderecos
where COMPLEMENTO <> 'cnpj: 00.029.372/0007-36'

SELECT CIDADE, ESTADO, MUNICIPIO, MUNICIPIO +10 
FROM ENDERECOS

---------------------------FUNÇÕES------------------------
-- ISNULL() -> FUNÇÃO PARA TRATAR VALORES NULOS (NULL)
-- COALESCE() -> FUNÇÃO PADÃO ANSI PARA TRATAR VALOR NULOS (NULL)

select CIDADE
, ESTADO
, MUNICIPIO
, COMPLEMENTO
, ISNULL (COMPLEMENTO, 'SEM COMPLEMENTO') AS FUNCAO_ISNULL
, COALESCE (COMPLEMENTO, 'SEM COMPLEMENTO') AS FUNCAO_COALESCE
from enderecos

SELECT COALESCE (VENDEDOR, -1) AS VENDEDOR 
, PRODUTO
, QUANTIDADE 
FROM VENDAS_ANALITICAS

SELECT COALESCE (VENDEDOR, -1) AS VENDEDOR 
, PRODUTO
, QUANTIDADE 
FROM VENDAS_ANALITICAS

select CIDADE
, ESTADO
, MUNICIPIO
, COALESCE (MUNICIPIO, -1)
from enderecos
where COALESCE (MUNICIPIO, -1) = -1 

SELECT CIDADE
, ESTADO
, ISNULL (MUNICIPIO, -1)
FROM ENDERECOS

---------------------OPERADORES------------------
/*
IS NULL 
IS NOT NULL 
*/
-- RECUPERANDO APENAS VALORES NULOS 
SELECT CIDADE
, ESTADO 
, MUNICIPIO
, COALESCE (MUNICIPIO , -1)
FROM ENDERECOS 
WHERE COALESCE(MUNICIPIO , -1)= -1

SELECT CIDADE
, ESTADO 
, MUNICIPIO
, COALESCE (MUNICIPIO , -1)
FROM ENDERECOS 
WHERE MUNICIPIO IS NULL

-- RECUPERANDO APENAS VALORES NÃO NULOS 
SELECT CIDADE
, ESTADO 
, MUNICIPIO
, COALESCE (MUNICIPIO , -1)
FROM ENDERECOS 
WHERE COALESCE(MUNICIPIO , -1)<> -1

SELECT CIDADE
, ESTADO 
, MUNICIPIO
, COALESCE (MUNICIPIO , -1)
FROM ENDERECOS 
WHERE MUNICIPIO IS NOT NULL

/*
-- NULLIF = A função NULLIF é usada para retornar NULL se dois valores forem iguais,
	caso contrário, retorna o primeiro valor.
*/

SELECT CIDADE
, ESTADO 
, COMPLEMENTO
, NULLIF (NULLIF( COMPLEMENTO, '') , 'CNPJ: 00.029.372/0007-36')AS FUNCAO_NULLIF
FROM ENDERECOS

SELECT CIDADE
, ESTADO 
, COMPLEMENTO
, NULLIF (NULLIF( COMPLEMENTO, '') , 'CNPJ: 00.029.372/0007-36')AS FUNCAO_NULLIF
FROM ENDERECOS
WHERE NULLIF (NULLIF (COMPLEMENTO, ''), 'CNPJ: 00.029.372/0007-36') IS  NOT NULL

/*
CEILING() = ARRENDONDA VALORES PARA BAIXO 
FLOOR() = ARRENDONDA VALORES PARA CIMA 
ROUND() = ARRENDONDA VALORES DE ACORDO COM CRITERIOS MATMEMATICOS
ABS() = RETORNA VALORES ABSOLUTOS 
*/

SELECT TOP 1000
  PRODUTO
, QUANTIDADE
, VENDA_BRUTA
, CEILING(VENDA_BRUTA) AS FUNCAO_CEILING
, FLOOR(VENDA_BRUTA) AS FUNCAO_FLOOR
, ROUND(VENDA_BRUTA,0) AS FUNCAO_ROUND_0
, ROUND(VENDA_BRUTA,1) AS FUNCAO_ROUD_1
, ABS(VENDA_BRUTA) AS FUNCAO_ABS
FROM VENDAS_ANALITICAS

SELECT TOP 1000
  PRODUTO
, QUANTIDADE
, VENDA_BRUTA
, CEILING(VENDA_BRUTA) AS FUNCAO_CEILING
, FLOOR(VENDA_BRUTA) AS FUNCAO_FLOOR
, ROUND(VENDA_BRUTA,0) AS FUNCAO_ROUND_0
, ROUND(VENDA_BRUTA,1) AS FUNCAO_ROUD_1
, ABS(VENDA_BRUTA) AS FUNCAO_ABS
FROM VENDAS_ANALITICAS
WHERE ABS(CEILING(VENDA_BRUTA)) = 360

----------------------------
----------DESAFIO-----------
----------------------------

-- DESAFIO 01

SELECT TOP 100
  COALESCE (VENDEDOR,0) AS VENDEDOR 
, PRODUTO
, QUANTIDADE
, ROUND (VENDA_BRUTA / QUANTIDADE,02)AS VALOR_UNITARIO 
, VENDA_BRUTA 
FROM VENDAS_ANALITICAS
WHERE VENDEDOR IS NULL 
ORDER BY VALOR_UNITARIO DESC

SELECT TOP 100
  VENDEDOR 
, PRODUTO
, QUANTIDADE
, ROUND (VENDA_BRUTA / QUANTIDADE,02)AS VALOR_UNITARIO 
, VENDA_BRUTA 
FROM VENDAS_ANALITICAS
WHERE VENDEDOR IS NOT NULL 
ORDER BY VALOR_UNITARIO DESC

/*
GETDATE = retorna a data e a hora atuais do sistema. 

YEAR = ANO
MONTH = MÊS
DAY = DIA 
*/

SELECT GETDATE() AS DATA_HORA_ATUAL
, YEAR(GETDATE())AS AN0
, MONTH(GETDATE())AS MES
, DAY(GETDATE())AS DIA

SELECT NOME
, DATA_CADASTRO
, YEAR (DATA_CADASTRO)AS ANO_CADASTRO
, MONTH (DATA_CADASTRO) AS MES_CADASTRO
, DAY (DATA_CADASTRO) AS DIA_CADASTRO
FROM ENTIDADES
ORDER BY ANO_CADASTRO

/*
--DATEPART é uma função usada em SQL para extrair uma parte específica de uma 
		data ou hora, como ano, mês, dia, hora, etc.

YEAR = ANO 
MONTH = MÊS
DAY = DIA
QUARTER = QUADRIMESTRE
DAYOFYEAR = DIA E ANO 
WEEK = SEMANA
WEEKDAY = DIA DA SEMANA
HOUR = HORA 
MINUTE = MINUTO
SECOND = SEGUNDO
*/

SELECT GETDATE() AS DATA_HORA_ATUAL
, YEAR(GETDATE())AS AN0
, MONTH(GETDATE())AS MES
, DAY(GETDATE())AS DIA
, DATEPART(HOUR, GETDATE()) AS HORAS
, DATEPART(MINUTE, GETDATE()) AS MINUTO
, DATEPART(QUARTER, GETDATE()) 
, DATEPART(WEEK, GETDATE()) AS SEMANA 
, DATEPART(WEEKDAY, GETDATE()) AS DIA_SEMANA

SELECT NOME
, DATA_CADASTRO
, YEAR (DATA_CADASTRO)AS ANO_CADASTRO
, MONTH (DATA_CADASTRO) AS MES_CADASTRO
, DAY (DATA_CADASTRO) AS DIA_CADASTRO
, DATEPART(WEEK, DATA_CADASTRO) AS SEMANA_CADASTRO
, DATEPART (WEEKDAY, DATA_CADASTRO) AS DIA_SEMANA_CADASTRO
, DATEPART (DAYOFYEAR, DATA_CADASTRO) AS DIA_ANO_CADASTRO
FROM ENTIDADES
WHERE DATEPART(WEEK, DATA_CADASTRO) = 6
ORDER BY ANO_CADASTRO


/* 
DATEADD =   é uma função utilizada em linguagens de programação e bancos de dados para adicionar uma quantidade específica de tempo a uma data.
Ela permite adicionar anos, meses, dias, horas, minutos ou segundos a uma data existente.
*/

SELECT GETDATE() AS DATA_HORA_ATUAL
, YEAR(GETDATE())AS AN0
, MONTH(GETDATE())AS MES
, DAY(GETDATE())AS DIA
, DATEPART(HOUR, GETDATE()) AS HORAS
, DATEPART(MINUTE, GETDATE()) AS MINUTO
, DATEPART(QUARTER, GETDATE()) AS NÃO 
, DATEPART(WEEK, GETDATE()) AS SEMANA 
, DATEPART(WEEKDAY, GETDATE()) AS DIA_SEMANA 
, DATEADD(YEAR,1 ,GETDATE())


SELECT TITULO
, VENCIMENTO
, DATEADD(DAY, 10, VENCIMENTO) AS VENCIMENTO_PARA_PROTESTO
 FROM TITULOS_RECEBER

 /*
DATEDIFF = é uma função utilizada em linguagens de programação e bancos de dados para calcular a diferença entre duas datas. 
Ela retorna o número de unidades de tempo (anos, meses, dias, horas, minutos, segundos) entre as duas datas especificadas.
EOMONTH = é uma função utilizada em linguagens de programação e bancos de dados para retornar a data do último dia do mês de uma data especificada. 
Ela pode ser útil para cálculos relacionados a datas, como encontrar o último dia do mês para fins de faturamento ou planejamento.
*/

SELECT GETDATE() AS DATA_HORA_ATUAL
, YEAR(GETDATE())AS AN0
, MONTH(GETDATE())AS MES
, DAY(GETDATE())AS DIA
, DATEPART(HOUR, GETDATE()) AS HORAS
, DATEPART(MINUTE, GETDATE()) AS MINUTO
, DATEPART(QUARTER, GETDATE()) AS NÃO 
, DATEPART(WEEK, GETDATE()) AS SEMANA 
, DATEPART(WEEKDAY, GETDATE()) AS DIA_SEMANA 
, DATEADD(YEAR,1 ,GETDATE())


SELECT NOME
, DATA_CADASTRO
, YEAR (DATA_CADASTRO)AS ANO_CADASTRO
, MONTH (DATA_CADASTRO) AS MES_CADASTRO
, DAY (DATA_CADASTRO) AS DIA_CADASTRO
, DATEPART(WEEK, DATA_CADASTRO) AS SEMANA_CADASTRO
, DATEPART (WEEKDAY, DATA_CADASTRO) AS DIA_SEMANA_CADASTRO
, DATEPART (DAYOFYEAR, DATA_CADASTRO) AS DIA_ANO_CADASTRO
, DATEDIFF(YEAR, DATA_CADASTRO, GETDATE())AS DIFERENCAS_EM_ANOS
, CONCAT(DATEDIFF(YEAR, DATA_CADASTRO, GETDATE()), 'ANOS')AS DIFERENCAS_EM_ANOS
, CONCAT(DATEDIFF(MONTH, DATA_CADASTRO, GETDATE()), 'MESES')AS DIFERENCAS_EM_MESES
, CONCAT(DATEDIFF(DAY, DATA_CADASTRO, GETDATE()), 'DIAS')AS DIFERENCAS_EM_DIAS 
FROM ENTIDADES
WHERE DATEPART(WEEK, DATA_CADASTRO) = 6
ORDER BY ANO_CADASTRO

SELECT TITULO
, MOVIMENTO
, VENCIMENTO
, DATEDIFF( DAY, MOVIMENTO, VENCIMENTO) AS PRAZO
, CONCAT (DATEDIFF(DAY ,MOVIMENTO, VENCIMENTO),' DIAS DE PRAZO') AS PRAZO
, EOMONTH(MOVIMENTO) AS ULTIMO_DIA_MES
, DAY(EOMONTH(MOVIMENTO)) AS ULTIMO_DIA_MES
 FROM TITULOS_RECEBER
 
 /*
 UPPER = é utilizada para converter uma string para letras maiúsculas. Por exemplo, "hello" se tornaria "HELLO".
 LOWER = é utilizada para converter uma string para letras minúsculas. Por exemplo, "WORLD" se tornaria "world".
 REPLACE = é  utilizada para substituir uma substring por outra em uma string.
	Por exemplo, replace("Hello, world!", "world", "universe") resultaria em "Hello, universe!".
 LEN = é utilizada para obter o comprimento de uma string, ou seja, o número de caracteres presentes na string. 
	Por exemplo, len("hello") retornaria 5.
 */
 
 SELECT NOME
, UPPER(NOME) AS LETRAS_MAIUSCULAS
, LOWER(NOME_FANTASIA) AS LETRAS_MINISCULAS 
, REPLACE(NOME, 'CLIENTE',' ') AS FUNCAO_REPLACE
, REPLACE(NOME, 'ENTE','__') AS FUNCAO_REPLACE2
, LEN (NOME)AS QUANTIDADE_CARACCTERES 
 FROM ENTIDADES

 /*
 LEFT = retorn9a os primeiros caracteres de uma string. Ela é usada para extrair uma parte inicial da string com base na quantidade de caracteres desejada.
	Por exemplo, LEFT("Hello", 3) retornaria "Hel".
 RIGTH = retorna os últimos caracteres de uma string. Ela é usada para extrair uma parte final da string com base na quantidade de caracteres desejada.
	Por exemplo, RIGHT("Hello", 3) retornaria "llo".
 SUBSTRING =  usada para extrair uma parte específica de uma string. Ela requer três argumentos: a string original, a posição inicial e a quantidade de caracteres a serem extraídos. 
	Por exemplo, SUBSTRING("Hello", 2, 3) retornaria "ell". 
	Isso significa que a extração começaria na posição 2 da string original e pegaria os próximos 3 caracteres.
 */

 SELECT NOME
, LEFT(NOME, 7)
, RIGHT(NOME,4)
, SUBSTRING(NOME, 4, 3)
 FROM ENTIDADES 

 /*
CHARINDEX = é usada para encontrar a posição de uma substring dentro de uma string.
TRIM = remove os espaços em branco tanto no início quanto no final da string.
RTRIM = remove os espaços em branco do final da string.
LTRIM = remove os espaços em branco do início da string.
 */

 SELECT LTRIM (' ITALO MESQUITA ')
 SELECT RTRIM (' ITALO MESQUITA ')
 SELECT TRIM (' ITALO MESQUITA ')

SELECT CIDADE
, CHARINDEX(' ', CIDADE) AS POSICAO_DO_ESPACO
 FROM ENDERECOS
 WHERE CIDADE LIKE 'S_O PAULO'

 SELECT NOME 
, CHARINDEX (' ', NOME) AS POSICAO_DO_ESPACO
, LEN(NOME) AS QUANTIDADE_CARACTERES
, SUBSTRING (NOME, 1, CHARINDEX (' ', NOME) -1) AS NOME 
, SUBSTRING(NOME, CHARINDEX (' ', NOME) +1, LEN(NOME) - CHARINDEX (' ', NOME)) AS SOBRENOME 
 FROM ENTIDADES

 -------DESAFIO-------
 /* RECUPERE DA TABELA TITULOS_RECEBER AS COLUNAS 

 DOCUMEN ENTIDADE
 TITULO
TO
 PARCELA
 PRAZO

 APENAS DA ENTIDADE DE CÓDIGO 1824, SEGUINDO AS SEGUINTES REGRAS 
 1. DOCUMENTO É O VALOR CONTIDO NO CAMPO TÍTULO ANTES DA "/"
 2. A PARCELA É O VALOR CONTIDO NO CAMPO TÍTULO APÓS A "/"
 3. O PRAZO É A DIFERENÇA EM DIAS ENTRE O MOVIMENTO E O VENCIMENTO 
 4.ORDENE AS INFOMAÇÕES PELO PRAZO EM ORDEM DECRESCENTE 
 */

 SELECT ENTIDADE
 ,  TITULO
 , CHARINDEX ('/', TITULO) AS POSSIÇÃO_BARRA 
 , SUBSTRING(TITULO, 1, CHARINDEX ('/', TITULO) -1) AS DOCUMENTO
 , SUBSTRING(TITULO, CHARINDEX ('/', TITULO) +1, LEN(TITULO) - CHARINDEX ('/', TITULO)) AS PARCELA
 , DATEDIFF(DAY, MOVIMENTO, VENCIMENTO) AS PRAZO
  FROM TITULOS_RECEBER
  where ENTIDADE = 1824
  ORDER BY PRAZO DESC










